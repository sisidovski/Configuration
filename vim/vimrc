"----------------------------------------------"
" NeoBundle
"----------------------------------------------"
set nocompatible
if has('vim_starting')
  set runtimepath+=~/Configuration/vim/bundle/neobundle.vim
endif
call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'
call neobundle#end()
"----------------"
" Shougo
"----------------"
NeoBundle 'Shougo/vimproc.vim', {
\   'build' : {
\       'windows': 'tools\\update-dll-mingw',
\       'cygwin': 'make -f make_cygwin.mak',
\       'mac': 'make -f make_mac.mak',
\       'linux': 'make',
\       'unix': 'gmake',
\   },
\ }
NeoBundle 'unite.vim'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/neocomplete'
NeoBundle 'Shougo/vimfiler'
"----------------"
" syntax
"----------------"
NeoBundle 'groenewege/vim-less'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'slim-template/vim-slim'
NeoBundle 'motus/pig.vim'
"----------------"
" markdown
"----------------"
"NeoBundle 'tpope/vim-markdown'
"NeoBundle 'tyru/open-browser.vim'
"----------------"
" vcs
"----------------"
NeoBundle 'mhinz/vim-signify'
NeoBundle 'tpope/vim-fugitive'
"----------------"
" colorscheme
"----------------"
NeoBundle 'cocopon/iceberg.vim'
NeoBundle 'tomasr/molokai'
NeoBundle 'altercation/vim-colors-solarized'
"----------------"
" file-search
"----------------"
"NeoBundle 'rking/ag.vim'
"----------------"
" others
"----------------"
NeoBundle 'osyo-manga/vim-anzu'
NeoBundle 'mattn/benchvimrc-vim'
NeoBundle 'nathanaelkane/vim-indent-guides'
"NeoBundle 'itchyny/lightline.vim'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-ref'
"----------------"
" golang
"----------------"
"NeoBundle 'fatih/vim-go'

"----------------"
" NeoBundleCheck
"----------------"
filetype plugin indent on
NeoBundleCheck

"----------------------------------------------"
" general
"----------------------------------------------"
syntax on
set number
set title
set showmatch
setlocal omnifunc=syntaxcomplete#Complete
set guifont=Source\ Code\ Pro:h14
colorscheme molokai
imap <C-f> <C-x><C-o>
set binary
set nobackup
set backspace=indent,eol,start
set nowrap
set ruler
set noundofile
set encoding=utf-8
"----------------"
" tab
"----------------"
"----------------"
" search
"----------------"
set ignorecase
set smartcase
set incsearch

"----------------"
" indent
"----------------"
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smartindent
set autoindent
""----------------"
"" indent by filetype
""----------------"
augroup vimrc
autocmd! FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd! FileType css  setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd! FileType less setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd! FileType js   setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd! FileType php  setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd! FileType as   setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd! FileType java setlocal shiftwidth=4 tabstop=4 softtabstop=4
augroup END
""----------------"
"" others
""----------------"
highlight TagKey guibg=#b5d68f
match TagKey /	/
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
"----------------"
"Escの2回押しでハイライト消去
"----------------"
"nmap ;nohlsearch
"----------------"
" tab:extension
"----------------"
"----------------"
" hilight of line "
"----------------"
set cursorline
highlight CursorLine cterm=underline ctermfg=NONE ctermbg=NONE

"----------------------------------------------"
" yanktmp "
"----------------------------------------------"
"map <silent> sy :call YanktmpYank()<CR> 
"map <silent> sp :call YanktmpPaste_p()<CR> 
"map <silent> sP :call YanktmpPaste_P()<CR> 

"----------------------------------------------"
" unite.vim
"----------------------------------------------"
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

let g:unite_enable_start_insert=1
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

"----------------"
" unite grep
"----------------"
" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

" カーソル位置の単語をgrep検索
nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
nnoremap <silent> ,ug  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" grep検索結果の再呼出
nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>
""----------------------------------------------"
"" solarized
""----------------------------------------------"
call togglebg#map("<F5>")
"
"----------------------------------------------"
" vim-indent-cuides
"----------------------------------------------"
nmap <silent> ,ig <Plug>IndentGuidesToggle
"GUI"
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_auto_colors = 1
let g:indent_guides_start_level = 2
let g:indent_guides_color_change_percent = 20
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black   ctermbg=black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=black ctermbg=black
hi IndentGuidesOdd   ctermbg=green
hi IndentGuidesEven  ctermbg=grey

"----------------------------------------------"
"AS3
"----------------------------------------------"
"au BufNewFile,BufRead *.as set ft=actionscript

"----------------------------------------------"
" neocmplete
"----------------------------------------------"
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

"----------------------------------------------"
" tagbar
"----------------------------------------------"
nmap <F8> :TagbarToggle<CR>

"----------------------------------------------"
" vim-lightline
"----------------------------------------------"
" let g:lightline = {
"     \ 'colorscheme': 'wombat',
"     \ 'component': {
"     \   'readonly': '%{&readonly?"⭤":""}',
"     \ },
"     \ 'separator': { 'left': '⮀', 'right': '⮂' },
"     \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
"     \ }
" set laststatus=2
" let g:lightline = {
"       \ 'colorscheme': 'solarized',
"       \ 'mode_map': { 'c': 'NORMAL' },
"       \ 'active': {
"       \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
"       \ },
"       \ 'component_function': {
"       \   'modified': 'MyModified',
"       \   'readonly': 'MyReadonly',
"       \   'fugitive': 'MyFugitive',
"       \   'filename': 'MyFilename',
"       \   'fileformat': 'MyFileformat',
"       \   'filetype': 'MyFiletype',
"       \   'fileencoding': 'MyFileencoding',
"       \   'mode': 'MyMode',
"       \ },
"       \ 'separator': { 'left': '⮀', 'right': '⮂' },
"       \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
"       \ }
" 
" function! MyModified()
"   return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
" endfunction
" 
" function! MyReadonly()
"   return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
" endfunction
" 
" function! MyFilename()
"   return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
"         \ (&ft == 'vimfiler' ? vimfiler#get_status_string() : 
"         \  &ft == 'unite' ? unite#get_status_string() : 
"         \  &ft == 'vimshell' ? vimshell#get_status_string() :
"         \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
"         \ ('' != MyModified() ? ' ' . MyModified() : '')
" endfunction
" 
" function! MyFugitive()
"   if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
"     let _ = fugitive#head()
"     return strlen(_) ? '⭠ '._ : ''
"   endif
"   return ''
" endfunction
" 
" function! MyFileformat()
"   return winwidth(0) > 70 ? &fileformat : ''
" endfunction
" 
" function! MyFiletype()
"   return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
" endfunction
" 
" function! MyFileencoding()
"   return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
" endfunction
" 
" function! MyMode()
"   return winwidth(0) > 60 ? lightline#mode() : ''
" endfunction

"----------------------------------------------"
" ctags / taglist
"----------------------------------------------"
"let Tlist_Ctags_Cmd='/usr/local/bin/ctags' "homebrew前提
"let g:SrcExpl_updateTagsCmd = "/usr/local/bin/ctags --sort=foldcase -R ."
"let tlist_php_settings = 'php;c:class;d:constant;f:function'

"----------------------------------------------"
" Source-Explorer-srcexpl
"----------------------------------------------"
""自動でプレビューを表示する。TODO:うざくなってきたら手動にする。またはソースを追う時だけ自動に変更する。
"let g:SrcExpl_RefreshTime   = 1
""プレビューウインドウの高さ
"let g:SrcExpl_WinHeight     = 9
""tagsは自動で作成する
"let g:SrcExpl_UpdateTags    = 1
""マッピング
"let g:SrcExpl_RefreshMapKey = "<Space>"
"let g:SrcExpl_GoBackMapKey  = "<C-b>"
"nmap <F8> :SrcExplToggle<CR>

""----------------------------------------------"
"" cscope
""----------------------------------------------"
""if has("cscope")
""  set csprg=/usr/local/bin/cscope
""  set csto=0
""  set cst
""  set nocsverb
""  " add any database in current directory
""  if filereadable("cscope.out")
""    cs add cscope.out
""  " else add database pointed to by environment 
""  elseif $CSCOPE_DB != ""
""    cs add $CSCOPE_DB
""  endif
""  set csverb
""  set cscopequickfix=s-,c-,d-,i-,t-,e-
""endif
"
"----------------------------------------------"
" ctrlp
"----------------------------------------------"
"----------------"
" ignore files
"----------------"
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
"----------------"
" open with a new tab
"----------------"
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': [],
  \ 'AcceptSelection("t")': ['<cr>', '<c-m>'],
  \ }


"----------------------------------------------"
" grep.vim
"----------------------------------------------"
" :Gb でGrepBufferする
" command! -nargs=1 Gb :GrepBuffer 
" カーソル下の単語をGrepBufferする
"minibufexpl.vim

"----------------------------------------------"
" vim-ref
"----------------------------------------------"
"nmap ,re :<C-u>Ref<Space>
"----------------"
" PHP
"----------------"
"let g:ref_phpmanual_path = $HOME . '/Documents/app_data/vim-ref/phpmanual/'
"----------------------------------------------"
" vimfiler
"----------------------------------------------"
let g:vimfiler_as_default_explorer = 1
"----------------------------------------------"
" the_silver_searcher
"----------------------------------------------"
"let g:agprg="<custom-ag-path-goes-here> --column"
"let g:unite_source_grep_command = 'ag'
"let g:unite_source_grep_default_opts = '--nocolor --nogroup'
"let g:unite_source_grep_recursive_opt = ''
"let g:unite_source_grep_max_candidates = 200
"nnoremap <silent> ,vf :<C-u>VimFilerBufferDir -split -simple -winwidth=30 -quit<CR>
"nnoremap <silent> ,vp :<C-u>VimFiler -project -split -simple -winwidth=30 -quit<CR>


"----------------------------------------------"
" signify (vcs manager)
"----------------------------------------------"
" 次の差分箇所に移動
nmap <Leader>gj <Plug>(signify-next-hunk)zz
" 前の差分箇所に移動
nmap <Leader>gk <Plug>(signify-prev-hunk)zz
" 差分箇所をハイライト
nmap <Leader>gh <Plug>(signify-toggle-highlight)
" 差分表示をトグルする(:SignifyToggleコマンドと同じ)
nmap <Leader>gt <Plug>(signify-toggle)

"----------------------------------------------"
" vim-go
"----------------------------------------------"
" if !exists('g:neocomplete#omni_patterns')
"     let g:neocomplete#omni_patterns = {}
" endif
" let g:neocomplete#omni_patterns.go = '\h\w*\.\?'
" 
" "let g:quickrun_config['go'] = {
" "          \ 'command': 'go',
" "          \ 'exec': ['%c run %s']
" "          \ }
" 
" au FileType go nmap <Leader>i <Plug>(go-info)
" au FileType go nmap <Leader>gd <Plug>(go-doc)
" au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
" au FileType go nmap <leader>gb <Plug>(go-build)
" au FileType go nmap <leader>gt <Plug>(go-test)
" au FileType go nmap gd <Plug>(go-def)
" au FileType go nmap <Leader>ds <Plug>(go-def-split)
" au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
" au FileType go nmap <Leader>dt <Plug>(go-def-tab)
" au FileType go nmap <Leader>gl :GoLint<CR>