"----------------------------------------------"
" NeoBundle
"----------------------------------------------"
if has('vim_starting')
  if &compatible
    set nocompatible
  endif
  set runtimepath+=~/.vim/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'
"----------------"
" Shougo
"----------------"
NeoBundle 'Shougo/vimproc.vim', {
\   'build' : {
\       'windows': 'tools\\update-dll-mingw',
\       'cygwin': 'make -f make_cygwin.mak',
\       'mac': 'make -f make_mac.mak',
\       'linux': 'make',
\       'unix': 'gmake',
\   },
\ }
NeoBundle 'unite.vim'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/neocomplete'
NeoBundle 'Shougo/vimfiler'
"----------------"
" syntax
"----------------"
NeoBundle 'groenewege/vim-less'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'slim-template/vim-slim'
NeoBundle 'motus/pig.vim'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'mxw/vim-jsx'
"----------------"
" markdown
"----------------"
"NeoBundle 'tpope/vim-markdown'
"NeoBundle 'tyru/open-browser.vim'
"----------------"
" vcs
"----------------"
NeoBundle 'mhinz/vim-signify'
NeoBundle 'tpope/vim-fugitive'
"----------------"
" colorscheme
"----------------"
NeoBundle 'cocopon/iceberg.vim'
NeoBundle 'tomasr/molokai'
NeoBundle 'altercation/vim-colors-solarized'
"----------------"
" file-search
"----------------"
"NeoBundle 'rking/ag.vim'
"----------------"
" others
"----------------"
NeoBundle 'osyo-manga/vim-anzu'
NeoBundle 'mattn/benchvimrc-vim'
NeoBundle 'nathanaelkane/vim-indent-guides'
"NeoBundle 'itchyny/lightline.vim'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-ref'
NeoBundle 'kovisoft/slimv'
"----------------"
" golang
"----------------"
"NeoBundle 'fatih/vim-go'

"----------------"
" NeoBundleCheck
"----------------"
call neobundle#end()
filetype plugin indent on
NeoBundleCheck

"----------------------------------------------"
" general
"----------------------------------------------"
syntax on
set number
set title
set showmatch
setlocal omnifunc=syntaxcomplete#Complete
set guifont=Source\ Code\ Pro:h14
colorscheme molokai
imap <C-f> <C-x><C-o>
set binary
set nobackup
set backspace=indent,eol,start
set nowrap
set ruler
set noundofile
set encoding=utf-8
"----------------"
" tab
"----------------"
"----------------"
" search
"----------------"
set ignorecase
set smartcase
set incsearch

"----------------"
" indent
"----------------"
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smartindent
set autoindent
"----------------"
" indent by filetype
"----------------"
augroup vimrc
autocmd! FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd! FileType css  setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd! FileType less setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd! FileType js   setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd! FileType php  setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd! FileType as   setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd! FileType java setlocal shiftwidth=4 tabstop=4 softtabstop=4
augroup END
"----------------"
" others
"----------------"
highlight TagKey guibg=#b5d68f
match TagKey /	/
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
"----------------"
" hilight of line "
"----------------"
set cursorline
highlight CursorLine cterm=underline ctermfg=NONE ctermbg=NONE

"----------------"
" mkdir
"----------------"
augroup vimrc-auto-mkdir  " {{{
  autocmd!
  autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
  function! s:auto_mkdir(dir, force)  " {{{
    if !isdirectory(a:dir) && (a:force ||
    \    input(printf('"%s" does not exist. Create? [y/N]', a:dir)) =~? '^y\%[es]$')
      call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
  endfunction  " }}}
augroup END  " }}}

"----------------------------------------------"
" unite.vim
"----------------------------------------------"
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

let g:unite_enable_start_insert=1
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

"----------------"
" unite grep
"----------------"
" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

" カーソル位置の単語をgrep検索
nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
nnoremap <silent> ,ug  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" grep検索結果の再呼出
nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>
""----------------------------------------------"
"" solarized
""----------------------------------------------"
call togglebg#map("<F5>")
"
"----------------------------------------------"
" vim-indent-cuides
"----------------------------------------------"
nmap <silent> ,ig <Plug>IndentGuidesToggle
"GUI"
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_auto_colors = 1
let g:indent_guides_start_level = 2
let g:indent_guides_color_change_percent = 20
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black   ctermbg=black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=black ctermbg=black
hi IndentGuidesOdd   ctermbg=green
hi IndentGuidesEven  ctermbg=grey

"----------------------------------------------"
" neocmplete
"----------------------------------------------"
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

"----------------------------------------------"
" tagbar
"----------------------------------------------"
nmap <F8> :TagbarToggle<CR>

"----------------------------------------------"
" ctags / taglist
"----------------------------------------------"
"let Tlist_Ctags_Cmd='/usr/local/bin/ctags' "homebrew前提
"let g:SrcExpl_updateTagsCmd = "/usr/local/bin/ctags --sort=foldcase -R ."
"let tlist_php_settings = 'php;c:class;d:constant;f:function'

"----------------------------------------------"
" ctrlp
"----------------------------------------------"
"----------------"
" ignore files
"----------------"
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
"----------------"
" open with a new tab
"----------------"
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': [],
  \ 'AcceptSelection("t")': ['<cr>', '<c-m>'],
  \ }

"----------------------------------------------"
" vimfiler
"----------------------------------------------"
let g:vimfiler_as_default_explorer = 1

"----------------------------------------------"
" react.js
"----------------------------------------------"
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

"----------------------------------------------"
" signify (vcs manager)
"----------------------------------------------"
" 次の差分箇所に移動
nmap <Leader>gj <Plug>(signify-next-hunk)zz
" 前の差分箇所に移動
nmap <Leader>gk <Plug>(signify-prev-hunk)zz
" 差分箇所をハイライト
nmap <Leader>gh <Plug>(signify-toggle-highlight)
" 差分表示をトグルする(:SignifyToggleコマンドと同じ)
nmap <Leader>gt <Plug>(signify-toggle)

"----------------------------------------------"
" vim-go
"----------------------------------------------"
" if !exists('g:neocomplete#omni_patterns')
"     let g:neocomplete#omni_patterns = {}
" endif
" let g:neocomplete#omni_patterns.go = '\h\w*\.\?'
"
" "let g:quickrun_config['go'] = {
" "          \ 'command': 'go',
" "          \ 'exec': ['%c run %s']
" "          \ }
"
" au FileType go nmap <Leader>i <Plug>(go-info)
" au FileType go nmap <Leader>gd <Plug>(go-doc)
" au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
" au FileType go nmap <leader>gb <Plug>(go-build)
" au FileType go nmap <leader>gt <Plug>(go-test)
" au FileType go nmap gd <Plug>(go-def)
" au FileType go nmap <Leader>ds <Plug>(go-def-split)
" au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
" au FileType go nmap <Leader>dt <Plug>(go-def-tab)
" au FileType go nmap <Leader>gl :GoLint<CR>

"----------------------------------------------"
" lisp
"----------------------------------------------"
" let g:slimv_swank_cmd = '!osascript -e "tell application \"Terminal\" to do script \"sbcl --load ~/.vim/bundle/slimv.vim/slime/start-swank.lisp\""'
" let g:paredit_mode=1
" let g:paredit_electric_return = 0
" function! s:generate_lisp_tags()
"   let g:slimv_ctags =  'ctags -a -f '.$HOME.'/.vim/tags/lisp.tags '.expand('%:p').' --language-force=Lisp'
"   call SlimvGenerateTags()
" endfunction
" command! -nargs=0 GenerateLispTags call <SID>generate_lisp_tags()
" function! s:generate_lisp_tags_recursive()
"   let g:slimv_ctags =  'ctags -a -f '.$HOME.'/.vim/tags/lisp.tags -R '.expand('%:p:h').' --language-force=Lisp'
"   call SlimvGenerateTags()
" endfunction
" command! -nargs=0 GenerateLispTagsRecursive call <SID>generate_lisp_tags_recursive()
" let g:slimv_repl_split = 4
" let g:slimv_repl_name = 'REPL'
" let g:slimv_repl_simple_eval = 0
" let g:slimv_lisp = '/usr/local/bin/clisp'
" let g:slimv_impl = 'clisp'
" let g:slimv_preferred = 'clisp'
" let g:lisp_rainbow=1
" autocmd BufNewFile,BufRead *.asd   set filetype=lisp
